// Generated by Dagger (https://dagger.dev).
package com.prestosoftware.test.di;

import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.prestosoftware.test.rappi.data.api.MovieService;
import com.prestosoftware.test.rappi.data.db.MovieDao;
import com.prestosoftware.test.rappi.data.db.TestDb;
import com.prestosoftware.test.rappi.repository.MovieRepository;
import com.prestosoftware.test.rappi.repository.MovieRepository_Factory;
import com.prestosoftware.test.rappi.ui.main.MainActivity;
import com.prestosoftware.test.rappi.ui.main.MainActivityViewModel;
import com.prestosoftware.test.rappi.ui.main.MainActivityViewModel_Factory;
import com.prestosoftware.test.rappi.ui.main.MainActivity_MembersInjector;
import com.prestosoftware.test.rappi.ui.movie.detail.MovieDetailActivity;
import com.prestosoftware.test.rappi.ui.movie.detail.MovieDetailViewModel;
import com.prestosoftware.test.rappi.ui.movie.detail.MovieDetailViewModel_Factory;
import com.prestosoftware.test.rappi.ui.movie.popular.MoviePopularListFragment;
import com.prestosoftware.test.rappi.ui.movie.topRated.MovieTopListFragment;
import com.prestosoftware.test.rappi.ui.movie.upcoming.MovieUpcomingListFragment;
import com.prestosoftware.test.rappi.util.compose.ViewModelActivity;
import com.prestosoftware.test.rappi.util.compose.ViewModelActivity_MembersInjector;
import com.prestosoftware.test.rappi.util.compose.ViewModelFragment;
import com.prestosoftware.test.rappi.util.compose.ViewModelFragment_MembersInjector;
import com.prestosoftware.test.rappi.util.factory.AppViewModelFactory;
import com.prestosoftware.test.rappi.util.factory.AppViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent.Factory> viewModelActivitySubcomponentFactoryProvider;

  private Provider<ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent.Factory> viewModelFragmentSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent.Factory> movieDetailActivitySubcomponentFactoryProvider;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<MovieService> provideMovieServiceProvider;

  private Provider<Application> applicationProvider;

  private Provider<TestDb> provideDatabaseProvider;

  private Provider<MovieDao> provideMovieDaoProvider;

  private Provider<MovieRepository> movieRepositoryProvider;

  private Provider<MainActivityViewModel> mainActivityViewModelProvider;

  private Provider<MovieDetailViewModel> movieDetailViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<AppViewModelFactory> appViewModelFactoryProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam,
      PersistenceModule persistenceModuleParam, Application applicationParam) {

    initialize(networkModuleParam, persistenceModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(ViewModelActivity.class, (Provider) viewModelActivitySubcomponentFactoryProvider).put(ViewModelFragment.class, (Provider) viewModelFragmentSubcomponentFactoryProvider).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(MovieDetailActivity.class, (Provider) movieDetailActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final PersistenceModule persistenceModuleParam, final Application applicationParam) {
    this.viewModelActivitySubcomponentFactoryProvider = new Provider<ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent.Factory>() {
      @Override
      public ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent.Factory get(
          ) {
        return new ViewModelActivitySubcomponentFactory();}
    };
    this.viewModelFragmentSubcomponentFactoryProvider = new Provider<ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent.Factory>() {
      @Override
      public ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent.Factory get(
          ) {
        return new ViewModelFragmentSubcomponentFactory();}
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent.Factory get(
          ) {
        return new MainActivitySubcomponentFactory();}
    };
    this.movieDetailActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent.Factory get(
          ) {
        return new MovieDetailActivitySubcomponentFactory();}
    };
    this.provideHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideHttpClientFactory.create(networkModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideHttpClientProvider));
    this.provideMovieServiceProvider = DoubleCheck.provider(NetworkModule_ProvideMovieServiceFactory.create(networkModuleParam, provideRetrofitProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideDatabaseProvider = DoubleCheck.provider(PersistenceModule_ProvideDatabaseFactory.create(persistenceModuleParam, applicationProvider));
    this.provideMovieDaoProvider = DoubleCheck.provider(PersistenceModule_ProvideMovieDaoFactory.create(persistenceModuleParam, provideDatabaseProvider));
    this.movieRepositoryProvider = DoubleCheck.provider(MovieRepository_Factory.create(provideMovieServiceProvider, provideMovieDaoProvider));
    this.mainActivityViewModelProvider = MainActivityViewModel_Factory.create(movieRepositoryProvider);
    this.movieDetailViewModelProvider = MovieDetailViewModel_Factory.create(movieRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(MainActivityViewModel.class, (Provider) mainActivityViewModelProvider).put(MovieDetailViewModel.class, (Provider) movieDetailViewModelProvider).build();
    this.appViewModelFactoryProvider = DoubleCheck.provider(AppViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(DaggerApplication instance) {
    injectDaggerApplication(instance);}

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new NetworkModule(), new PersistenceModule(), application);
    }
  }

  private final class ViewModelActivitySubcomponentFactory implements ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent.Factory {
    @Override
    public ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent create(
        ViewModelActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ViewModelActivitySubcomponentImpl(arg0);
    }
  }

  private final class ViewModelActivitySubcomponentImpl implements ComposeModule_ContributeViewModelActivity$app_debug.ViewModelActivitySubcomponent {
    private ViewModelActivitySubcomponentImpl(ViewModelActivity arg0) {

    }

    @Override
    public void inject(ViewModelActivity arg0) {
      injectViewModelActivity(arg0);}

    private ViewModelActivity injectViewModelActivity(ViewModelActivity instance) {
      ViewModelActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ViewModelFragmentSubcomponentFactory implements ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent.Factory {
    @Override
    public ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent create(
        ViewModelFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ViewModelFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ViewModelFragmentSubcomponentImpl implements ComposeModule_ContributeViewModelFragment$app_debug.ViewModelFragmentSubcomponent {
    private ViewModelFragmentSubcomponentImpl(ViewModelFragment arg0) {

    }

    @Override
    public void inject(ViewModelFragment arg0) {
      injectViewModelFragment(arg0);}

    private ViewModelFragment injectViewModelFragment(ViewModelFragment instance) {
      ViewModelFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_ContributeMainActivity$app_debug.MainActivitySubcomponent {
    private Provider<MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent.Factory> moviePopularListFragmentSubcomponentFactoryProvider;

    private Provider<MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent.Factory> movieTopListFragmentSubcomponentFactoryProvider;

    private Provider<MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent.Factory> movieUpcomingListFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(ViewModelActivity.class, (Provider) DaggerAppComponent.this.viewModelActivitySubcomponentFactoryProvider).put(ViewModelFragment.class, (Provider) DaggerAppComponent.this.viewModelFragmentSubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(MovieDetailActivity.class, (Provider) DaggerAppComponent.this.movieDetailActivitySubcomponentFactoryProvider).put(MoviePopularListFragment.class, (Provider) moviePopularListFragmentSubcomponentFactoryProvider).put(MovieTopListFragment.class, (Provider) movieTopListFragmentSubcomponentFactoryProvider).put(MovieUpcomingListFragment.class, (Provider) movieUpcomingListFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.moviePopularListFragmentSubcomponentFactoryProvider = new Provider<MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent.Factory>() {
        @Override
        public MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent.Factory get(
            ) {
          return new MoviePopularListFragmentSubcomponentFactory();}
      };
      this.movieTopListFragmentSubcomponentFactoryProvider = new Provider<MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent.Factory>() {
        @Override
        public MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent.Factory get(
            ) {
          return new MovieTopListFragmentSubcomponentFactory();}
      };
      this.movieUpcomingListFragmentSubcomponentFactoryProvider = new Provider<MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent.Factory>() {
        @Override
        public MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent.Factory get(
            ) {
          return new MovieUpcomingListFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectFragmentInjector(instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class MoviePopularListFragmentSubcomponentFactory implements MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent.Factory {
      @Override
      public MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent create(
          MoviePopularListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MoviePopularListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MoviePopularListFragmentSubcomponentImpl implements MainActivityFragmentModule_ContributeMoviePopularListFragment.MoviePopularListFragmentSubcomponent {
      private MoviePopularListFragmentSubcomponentImpl(MoviePopularListFragment arg0) {

      }

      @Override
      public void inject(MoviePopularListFragment arg0) {
        injectMoviePopularListFragment(arg0);}

      private MoviePopularListFragment injectMoviePopularListFragment(
          MoviePopularListFragment instance) {
        ViewModelFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class MovieTopListFragmentSubcomponentFactory implements MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent.Factory {
      @Override
      public MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent create(
          MovieTopListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MovieTopListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MovieTopListFragmentSubcomponentImpl implements MainActivityFragmentModule_ContributeMovieTopListFragment.MovieTopListFragmentSubcomponent {
      private MovieTopListFragmentSubcomponentImpl(MovieTopListFragment arg0) {

      }

      @Override
      public void inject(MovieTopListFragment arg0) {
        injectMovieTopListFragment(arg0);}

      private MovieTopListFragment injectMovieTopListFragment(MovieTopListFragment instance) {
        ViewModelFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class MovieUpcomingListFragmentSubcomponentFactory implements MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent.Factory {
      @Override
      public MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent create(
          MovieUpcomingListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MovieUpcomingListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MovieUpcomingListFragmentSubcomponentImpl implements MainActivityFragmentModule_ContributeMovieUpcomingListFragment.MovieUpcomingListFragmentSubcomponent {
      private MovieUpcomingListFragmentSubcomponentImpl(MovieUpcomingListFragment arg0) {

      }

      @Override
      public void inject(MovieUpcomingListFragment arg0) {
        injectMovieUpcomingListFragment(arg0);}

      private MovieUpcomingListFragment injectMovieUpcomingListFragment(
          MovieUpcomingListFragment instance) {
        ViewModelFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class MovieDetailActivitySubcomponentFactory implements ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent create(
        MovieDetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MovieDetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class MovieDetailActivitySubcomponentImpl implements ActivityModule_ContributeMovieDetailActivity$app_debug.MovieDetailActivitySubcomponent {
    private MovieDetailActivitySubcomponentImpl(MovieDetailActivity arg0) {

    }

    @Override
    public void inject(MovieDetailActivity arg0) {
      injectMovieDetailActivity(arg0);}

    private MovieDetailActivity injectMovieDetailActivity(MovieDetailActivity instance) {
      ViewModelActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
      return instance;
    }
  }
}
